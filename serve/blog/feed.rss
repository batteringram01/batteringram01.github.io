<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Yeshwanth Kumar</title>
    <description></description>    
    <link>http://yeshwanthk.com</link>
    
      <item>
        <title>Deriving Type Class Instances</title>
                
        
          <description>&lt;p&gt;asdplaskdojasizzzzzzzzzzzzzzzodjasidjiashdiasuh&lt;/p&gt;
</description>
        
        <pubDate>2016-09-30 00:00:00 +0100</pubDate>
        <link>http://yeshwanthk.com/blog/2016/09/30/test.html</link>
        <guid isPermaLink="true">http://yeshwanthk.com/blog/2016/09/30/test.html</guid>
      </item>
    
      <item>
        <title>Play - the reactive web framework</title>
                
        
          <description>&lt;p&gt;We saw the world moving from writing web applications from java, to perl, to php, then the rails/django and now its time for something more reactive, Play Framework. Typesafe backed, play2 is written in scala and it is the only scala high-productivity web framework that I have loved working with. Getting started with play is a breeze .&lt;/p&gt;

&lt;p&gt;In this blog post, I will be covering about play framework, and how to install it and create a simple app.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;let-us-see-plays-awesomeness&quot;&gt;Let us see play’s awesomeness&lt;/h3&gt;

&lt;p&gt;One of the major role of a web framework is to define a very convincing application architecture that works for a range of applications. A web framework needs to bring  multiple components that is required together in order to make the  web development a lot easier and yes, it helps scalability. With out that, its just bunch of libraries with will cause incompatibility.
Play provides just that, it is a perfect framework to build any types of applications and scale well.&lt;/p&gt;

&lt;h2 id=&quot;non-blocking---asynchronous-io&quot;&gt;Non-blocking - asynchronous I/O&lt;/h2&gt;

&lt;p&gt;Play’s http server is JBOSS Netty and hence the non-blocking I/O, which gives the ability to process multiple requests with single thread.&lt;/p&gt;

&lt;h2 id=&quot;mvc-architecture&quot;&gt;MVC architecture&lt;/h2&gt;

&lt;p&gt;MVC design patterns which are widely used gives a loosely coupled architecture which seperates the logic from the other layers making it easy to develop.&lt;/p&gt;

&lt;h2 id=&quot;full-stack-web-framework&quot;&gt;Full stack web framework&lt;/h2&gt;

&lt;p&gt;Play is a fullstack nextgen web framework which can be used to develop simple apps to complex enterprise applications. Whether you are building a UI centric application with persistent db or writing a REST API with JSON transactions, play is the framework for you.&lt;/p&gt;

&lt;h2 id=&quot;scalae&quot;&gt;Scal(a)e&lt;/h2&gt;

&lt;p&gt;One of the major reasons why I even looked into play framework was because it is written in scala. It also integrates with Akka, a actor-based concurrency library for scala.
There are much more advanced topics like using enumerators and iteratees for building real-time applications, but I will cover them on my next blog post.&lt;/p&gt;

&lt;p&gt;Let us now install play and write a simple app.&lt;/p&gt;

&lt;h3 id=&quot;installing-play-framework&quot;&gt;Installing Play framework&lt;/h3&gt;

&lt;p&gt;Make sure you have jdk installed.&lt;/p&gt;

&lt;p&gt;Get the binary package first&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://download.playframework.org/releases/play-2.0.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, untar inside &lt;code&gt;/home/bin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: I generally install everything with binary packages, so I have a common bin folder
which contains all my languages, framework setups. It makes it a lot easier when you want to format your laptop, just backup your bashrc and bin folders.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now open up bashrc and add the line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/home/morpheyesh/bin/play-2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Close bashrc and either close the terminal window and open it or enter &lt;code&gt;source ~/.bashrc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see something like this if you type play on your terminal&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/playpic1.png&quot; alt=&quot;Play terminal image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you see this, then you have installed play and ready to start building your applications. Play builds the proper directory structure for you, just type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;play new &amp;lt;appname&amp;gt;
#Play will setup the basic template to get started
cd &amp;lt;appname&amp;gt;
atom ./
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: I use Github’s atom as my primary IDE, it has multiple packages and it is one of my favourite editor to work with.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you get this error&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/home/morpheyesh/bin/play-2.0/play: 51: /home/morpheyesh/bin/play-2.0/play: /home/morpheyesh/bin/play-2.0/framework/build: Permission denied
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then change permissions of your build file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod +rx /home/morpheyesh/bin/play-2.0/framework/build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now cd into your application and execute &lt;code&gt;play run&lt;/code&gt; to start the application on localhost:9000&lt;/p&gt;
</description>
        
        <pubDate>2015-03-25 00:00:00 +0000</pubDate>
        <link>http://yeshwanthk.com/blog/2015/03/25/getting-started-with-play.html</link>
        <guid isPermaLink="true">http://yeshwanthk.com/blog/2015/03/25/getting-started-with-play.html</guid>
      </item>
    
  </channel>
</rss>

